(()=>{"use strict";const e=new class{audioContext;tracks=[];slowAverage=39;fx1a=null;fx1b=null;loadedFiles=0;constructor(){this.audioContext=new AudioContext}async initAudio(e){if(16!==e.length)throw new Error("Expected 16 audio files.");const t=e.map((e=>this.loadAudioFile(e)));(await Promise.all(t)).forEach((e=>{const t=this.audioContext.createBufferSource(),n=this.audioContext.createGain();t.buffer=e,n.gain.value=0,t.connect(n);const o=this.audioContext.createAnalyser();o.fftSize=2048,n.connect(o),this.fx1a=this.audioContext.createBiquadFilter(),this.fx1a.type="highpass",this.fx1a.frequency.value=1e3,this.fx1a.gain.value=0,n.connect(this.fx1a),this.fx1b=this.audioContext.createDelay(),this.fx1b.delayTime.value=0,this.fx1a.connect(this.fx1b),n.connect(this.audioContext.destination),this.tracks.push({sourceNode:t,gainNode:n,analyserNode:o}),t.loop=!0,t.start(0)}))}async loadAudioFile(e){const t=await fetch(e),n=await t.arrayBuffer();return this.loadedFiles++,console.log(`Loaded ${this.loadedFiles} files.`),this.audioContext.decodeAudioData(n)}getFrequencyColor(e){if(0===this.tracks[e].gainNode.gain.value)return`hsl(${this.slowAverage+e}, 100%, 50%)`;const t=this.tracks[e].analyserNode,n=new Uint8Array(t.frequencyBinCount);t.getByteFrequencyData(n);const o=Math.max(...n),i=n.indexOf(o);return this.updateSlowAverage(i),`hsl(${this.slowAverage+e+10*i%240}, 100%, 50%)`}updateSlowAverage(e){this.slowAverage=this.slowAverage+.001*e%240}enableTrack(e,t){if(-1!=e){if(e>=this.tracks.length)throw new Error(`Track ${e} does not exist.`);this.tracks[e].gainNode.gain.value=t?.5:0}}muteAll(){for(let e=0;e<this.tracks.length;e++)this.enableTrack(e,!1)}fx1(e,t){if(0!=e&&0!=t&&Math.random()>.1)return;if(!this.fx1a||!this.fx1b)return;console.log("fx1 called with x:",e,"y:",t),console.log("AudioContext state:",this.audioContext.state),console.log("Current time:",this.audioContext.currentTime),console.log("Applying gain:",25*e,"to fx1a");const n=Math.floor(10*e);this.fx1a.gain.setValueAtTime(n,this.audioContext.currentTime),this.fx1b.delayTime.setValueAtTime(t,this.audioContext.currentTime),console.log(this.fx1a,this.fx1b)}},t=16;var n=!1,o=null,i={width:0,height:0};function s(e){if("undefined"!=typeof TouchEvent&&e instanceof TouchEvent&&(e.touches||e.changedTouches)){const t=e.touches.length>0?e.touches:e.changedTouches;return{x:t[0].clientX,y:t[0].clientY}}if(e instanceof MouseEvent)return{x:e.clientX,y:e.clientY};throw new Error("Unsupported event type")}function a(e,t,n,o){const i=document.createElement(e);return i.classList.add(t),i.id=n,o.appendChild(i),i}function r(e){document.querySelectorAll(".ball").forEach((t=>{t.style.display=e?"block":"none"}))}function c(e){if(!e)return-1;const t=e.split("square-");return t.length<2?-1:parseInt(t[1])}function d(e){if(e)a("div","spinner","spinner",document.body),o=a("progress","progress","progress",document.body),setTimeout(l,100);else{const e=document.getElementById("spinner");e?.remove(),o?.remove()}}function l(){if(!o)return;const t=e.loadedFiles/16;console.log("Progress:",t),o.setAttribute("value",t.toString()),1!=t&&setTimeout(l,100)}function u(){const o=document.getElementById("start-button"),l=document.getElementById("info-1"),u=document.getElementById("info-2");o?.addEventListener("click",(async()=>{o.remove(),l?.remove(),u?.remove(),d(!0),await async function(){n||(await e.initAudio(["stems/4-on-floor.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav","stems/smooth-chords.wav","stems/bass.wav","stems/bzzz.wav","stems/guitar.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/keep-on.wav","stems/what-u-doin-to-me.wav","stems/extacy.wav"]),n=!0)}(),d(!1),function(){const e=a("div","matrix","matrix",document.body);for(let n=0;n<t;n++)a("div","square",`square-${n}`,e);const n=a("div","ballhome","ballhome",document.body);for(let e=0;e<4;e++){const t=a("div","ball",`ball-${e}`,n);t.draggable=!0,t.innerText="ðŸŒˆ"}}(),function(){const t=document.querySelectorAll(".ball");var n=!1;t.forEach((t=>{function n(e){e.preventDefault();const n=t.parentElement;t.setAttribute("origin-square",n.id),t.setAttribute("clicked","true"),console.log(`[${e.type}] Lifted`,t.id,"from",n.id)}function o(e){if(e.preventDefault(),"true"!==t.getAttribute("clicked"))return;const n=s(e);t.style.left=n.x-50+"px",t.style.top=n.y-50+"px"}function i(n){if("true"!==t.getAttribute("clicked"))return;const o=s(n),i=t.getAttribute("origin-square");e.enableTrack(c(i),!1),t.setAttribute("clicked","false"),r(!1);const a=document.elementFromPoint(o.x,o.y);r(!0),((t,n)=>{console.log("Dropped:",t.id,n.id),e.enableTrack(c(n.id),!0),n.appendChild(t)})(t,a),console.log(`[${n.type}] Dropped`,t.id,"from",i)}t.addEventListener("mousedown",n),t.addEventListener("mousemove",o),t.addEventListener("mouseup",i),t.addEventListener("touchstart",n),t.addEventListener("touchmove",o),t.addEventListener("touchend",i)})),document.addEventListener("mouseup",(e=>{n=!1})),document.addEventListener("mousedown",(e=>{n=!0})),document.addEventListener("mousemove",(e=>{if(!n)return;const o=s(e);var i=t[0];for(let e=0;e<t.length;e++)"true"===t[e].getAttribute("clicked")&&(i=t[e]);i&&0!=function(e,t,n){const o=e.getBoundingClientRect(),i=o.left+o.width/2,s=o.top+o.height/2;return Math.sqrt((i-t)**2+(s-n)**2)}(i,e.clientX,e.clientY)&&(i.style.left=o.x-50+"px",i.style.top=o.y-50+"px")})),i.width=window.innerWidth,i.height=window.innerHeight,window.addEventListener("resize",(()=>{const e=i.height,n=i.width;i.width=window.innerWidth,i.height=window.innerHeight,t.forEach((t=>{t.style.left=parseFloat(t.style.left)/n*i.width+"px",t.style.top=parseFloat(t.style.top)/e*i.height+"px"}))}))}(),h()}))}function h(){if(requestAnimationFrame(h),n)for(let n=0;n<t;n++){const t=document.getElementById(`square-${n}`);t&&(t.style.backgroundColor=e.getFrequencyColor(n))}}document.addEventListener("DOMContentLoaded",(()=>{u()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,