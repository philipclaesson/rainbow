(()=>{"use strict";const t=new class{audioContext;tracks=[];slowAverage=39;fx1a=null;fx1b=null;constructor(){this.audioContext=new AudioContext}async initAudio(t){if(16!==t.length)throw new Error("Expected 16 audio files.");const e=t.map((t=>this.loadAudioFile(t)));(await Promise.all(e)).forEach((t=>{const e=this.audioContext.createBufferSource(),n=this.audioContext.createGain();e.buffer=t,n.gain.value=0,e.connect(n);const o=this.audioContext.createAnalyser();o.fftSize=2048,n.connect(o),this.fx1a=this.audioContext.createBiquadFilter(),this.fx1a.type="highpass",this.fx1a.frequency.value=1e3,this.fx1a.gain.value=0,n.connect(this.fx1a),this.fx1b=this.audioContext.createDelay(),this.fx1b.delayTime.value=0,this.fx1a.connect(this.fx1b),n.connect(this.audioContext.destination),this.tracks.push({sourceNode:e,gainNode:n,analyserNode:o}),e.loop=!0,e.start(0)}))}async loadAudioFile(t){const e=await fetch(t),n=await e.arrayBuffer();return this.audioContext.decodeAudioData(n)}getFrequencyColor(t){if(0===this.tracks[t].gainNode.gain.value)return`hsl(${this.slowAverage+t}, 100%, 50%)`;const e=this.tracks[t].analyserNode,n=new Uint8Array(e.frequencyBinCount);e.getByteFrequencyData(n);const o=Math.max(...n),s=n.indexOf(o);return this.updateSlowAverage(s),`hsl(${this.slowAverage+t+10*s%240}, 100%, 50%)`}updateSlowAverage(t){this.slowAverage=this.slowAverage+.001*t%240}enableTrack(t,e){if(-1!=t){if(t>=this.tracks.length)throw new Error(`Track ${t} does not exist.`);console.log("Enabling track",t,e),this.tracks[t].gainNode.gain.value=e?.5:0}}muteAll(){for(let t=0;t<this.tracks.length;t++)this.enableTrack(t,!1)}fx1(t,e){if(0!=t&&0!=e&&Math.random()>.1)return;if(!this.fx1a||!this.fx1b)return;console.log("fx1 called with x:",t,"y:",e),console.log("AudioContext state:",this.audioContext.state),console.log("Current time:",this.audioContext.currentTime),console.log("Applying gain:",25*t,"to fx1a");const n=Math.floor(10*t);this.fx1a.gain.setValueAtTime(n,this.audioContext.currentTime),this.fx1b.delayTime.setValueAtTime(e,this.audioContext.currentTime),console.log(this.fx1a,this.fx1b)}},e=16;var n=!1;function o(t,e,n,o){const s=document.createElement(t);return s.classList.add(e),s.id=n,o.appendChild(s),s}function s(t){document.querySelectorAll(".ball").forEach((e=>{e.style.display=t?"block":"none"}))}function a(t){if(!t)return-1;const e=t.split("square-");return e.length<2?-1:parseInt(e[1])}function i(t){if(t)o("div","spinner","spinner",document.body);else{const t=document.getElementById("spinner");t?.remove()}}function r(){const r=document.getElementById("start-button"),l=document.getElementById("info");r?.addEventListener("click",(async()=>{r.remove(),l?.remove(),i(!0),await async function(){n||(await t.initAudio(["stems/4-on-floor.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/toms.wav","stems/guitar.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/extacy.wav"]),n=!0)}(),i(!1),function(){const t=o("div","matrix","matrix",document.body);for(let n=0;n<e;n++)o("div","square",`square-${n}`,t);const n=o("div","ballhome","ballhome",document.body);for(let t=0;t<4;t++){const e=o("div","ball",`ball-${t}`,n);e.draggable=!0,e.innerText="ðŸŒˆ"}}(),document.querySelectorAll(".ball").forEach((e=>{function n(t){if(t instanceof TouchEvent&&t.touches)return{x:t.touches[0].clientX,y:t.touches[0].clientY};if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};throw new Error("Unsupported event type")}function o(t){const n=e.parentElement;e.setAttribute("origin-square",n.id),e.setAttribute("clicked","true"),t.type,console.log(`[${t.type}] Lifted`,e.id,"from",n.id),t.preventDefault()}function i(t){if("true"!==e.getAttribute("clicked"))return;const o=n(t);e.style.left=o.x-25+"px",e.style.top=o.y-25+"px",t.preventDefault()}function r(o){if("true"!==e.getAttribute("clicked"))return;const i=n(o),r=e.getAttribute("origin-square");t.enableTrack(a(r),!1),e.setAttribute("clicked","false"),s(!1);const c=document.elementFromPoint(i.x,i.y);s(!0),((e,n)=>{console.log("Dropped:",e.id,n.id),t.enableTrack(a(n.id),!0),n.appendChild(e)})(e,c),console.log(`[${o.type}] Dropped`,e.id,"from",r)}e.addEventListener("mousedown",o),e.addEventListener("mousemove",i),e.addEventListener("mouseup",r),e.addEventListener("touchstart",o),e.addEventListener("touchmove",i),e.addEventListener("touchend",r)})),c()}))}function c(){if(requestAnimationFrame(c),n)for(let n=0;n<e;n++){const e=document.getElementById(`square-${n}`);e&&(e.style.backgroundColor=t.getFrequencyColor(n))}}document.addEventListener("DOMContentLoaded",(()=>{r()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,