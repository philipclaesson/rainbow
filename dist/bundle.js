(()=>{"use strict";const e=new class{audioContext;tracks=[];slowAverage=39;constructor(){this.audioContext=new AudioContext}async initAudio(e){if(16!==e.length)throw new Error("Expected 16 audio files.");const t=e.map((e=>this.loadAudioFile(e)));(await Promise.all(t)).forEach((e=>{const t=this.audioContext.createBufferSource(),n=this.audioContext.createGain();t.buffer=e,n.gain.value=0;const a=this.audioContext.createAnalyser();a.fftSize=2048,n.connect(a),t.connect(n),n.connect(this.audioContext.destination),this.tracks.push({sourceNode:t,gainNode:n,analyserNode:a}),t.loop=!0,t.start(0)}))}async loadAudioFile(e){const t=await fetch(e),n=await t.arrayBuffer();return this.audioContext.decodeAudioData(n)}getNoiseColor(e){const t=this.tracks[e].analyserNode,n=new Uint8Array(t.frequencyBinCount);t.getByteFrequencyData(n);const a=n.reduce(((e,t)=>e+t),0)/n.length;return`hsl(${Math.min(100+5*a,240)}, 100%, 50%)`}getFrequencyColor(e){if(0===this.tracks[e].gainNode.gain.value)return`hsl(${this.slowAverage+e}, 100%, 50%)`;const t=this.tracks[e].analyserNode,n=new Uint8Array(t.frequencyBinCount);t.getByteFrequencyData(n);const a=Math.max(...n),o=n.indexOf(a);return this.updateSlowAverage(o),`hsl(${this.slowAverage+e+5*o%240}, 100%, 50%)`}updateSlowAverage(e){this.slowAverage=this.slowAverage+.001*e%240}unMuteTrack(e){if(-1!=e){if(!this.tracks[e])throw new Error(`Track ${e} does not exist.`);this.tracks[e].gainNode.gain.value=1}}muteTrack(e){if(-1!=e){if(!this.tracks[e])throw new Error(`Track ${e} does not exist.`);this.tracks[e].gainNode.gain.value=0}}muteAll(){for(let e=0;e<this.tracks.length;e++)this.muteTrack(e)}},t=16;var n=!1,a=!1,o=null;function s(e){document.querySelectorAll(".ball").forEach((t=>{t.style.display=e?"block":"none"}))}function r(e){if(!e)return-1;const t=e.split("square-");return t.length<2?-1:parseInt(t[1])}function i(e){if(e){const e=document.createElement("div");e.classList.add("spinner"),e.id="spinner",document.body.appendChild(e)}else{const e=document.getElementById("spinner");e?.remove()}}function d(){if(requestAnimationFrame(d),n)for(let n=0;n<t;n++){const t=document.getElementById(`square-${n}`);t&&(t.style.backgroundColor=e.getFrequencyColor(n))}}document.addEventListener("DOMContentLoaded",(()=>{!function(){const c=document.getElementById("start-button"),l=document.getElementById("info");c?.addEventListener("click",(async()=>{c.remove(),l?.remove(),i(!0),await async function(){n||(await e.initAudio(["stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav","stems/acid-and-chord.wav","stems/bass.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav","stems/acid-and-chord.wav","stems/bass.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav"]),n=!0)}(),i(!1),function(){const e=document.createElement("div");e.classList.add("matrix"),e.id="matrix",document.body.appendChild(e);for(let n=0;n<t;n++){const t=document.createElement("div");t.classList.add("square"),t.id=`square-${n}`,e.appendChild(t)}(o=document.createElement("div")).classList.add("ballhome"),o.id="ballhome",document.body.appendChild(o);for(let e=0;e<3;e++){const t=document.createElement("div");t.classList.add("ball"),t.id=`ball-${e}`,t.draggable=!0,t.innerText="ðŸŒˆ",o.appendChild(t)}}(),function(){const t=document.querySelectorAll(".ball"),n=document.querySelectorAll(".square");let i=null,d=null;const c=t=>{i&&(console.log("Dropped:",i.id,t.id),e.unMuteTrack(r(t.id)),t.appendChild(i),d=null,i.style.display="block",i=null)};if(t.forEach((t=>{t.addEventListener("dragstart",(n=>{i=t,d=t.parentElement,n.dataTransfer?.setData("text/plain",t.id),console.log("[Dragstart]: Lifted",t.id,"from",d.id),e.muteTrack(r(d.id))})),t.addEventListener("touchstart",(n=>{a=!0,i=t,d=t.parentElement,console.log("[Touchstart] Lifted",t.id,"from",d.id),e.muteTrack(r(d.id))})),t.addEventListener("touchmove",(e=>{if(console.log("[Touchmove] Dragging",t.id,e.touches.length),e.preventDefault(),a=!0,1===e.touches.length){const n=e.touches[0];t.style.left=n.clientX-25+"px",t.style.top=n.clientY-25+"px"}})),t.addEventListener("touchend",(e=>{if(console.log("[Touchend] Dropped",t.id),!i)return;s(!1);const n=e.changedTouches[0],a=document.elementFromPoint(n.clientX,n.clientY);s(!0),c(a)}))})),n.forEach((e=>{e.addEventListener("dragover",(e=>{e.preventDefault()})),e.addEventListener("drop",(t=>{t.preventDefault(),c(e)}))})),!o)throw new Error("Ball home not found");o.addEventListener("dragover",(e=>{e.preventDefault()})),o.addEventListener("drop",(e=>{if(e.preventDefault(),!o)throw new Error("Ball home not found");c(o)})),document.addEventListener("dragover",(e=>{a||e.preventDefault()})),document.addEventListener("drop",(e=>{if(!a){const e=document.getElementById("ballhome");c(e)}}))}(),d()}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,