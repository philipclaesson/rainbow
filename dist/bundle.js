(()=>{"use strict";const e=new class{audioContext;tracks=[];slowAverage=39;fx1a=null;fx1b=null;constructor(){this.audioContext=new AudioContext}async initAudio(e){if(16!==e.length)throw new Error("Expected 16 audio files.");const t=e.map((e=>this.loadAudioFile(e)));(await Promise.all(t)).forEach((e=>{const t=this.audioContext.createBufferSource(),n=this.audioContext.createGain();t.buffer=e,n.gain.value=0,t.connect(n);const o=this.audioContext.createAnalyser();o.fftSize=2048,n.connect(o),this.fx1a=this.audioContext.createBiquadFilter(),this.fx1a.type="highpass",this.fx1a.frequency.value=1e3,this.fx1a.gain.value=0,n.connect(this.fx1a),this.fx1b=this.audioContext.createDelay(),this.fx1b.delayTime.value=0,this.fx1a.connect(this.fx1b),this.fx1b.connect(this.audioContext.destination),this.tracks.push({sourceNode:t,gainNode:n,analyserNode:o}),t.loop=!0,t.start(0)}))}async loadAudioFile(e){const t=await fetch(e),n=await t.arrayBuffer();return this.audioContext.decodeAudioData(n)}getFrequencyColor(e){if(0===this.tracks[e].gainNode.gain.value)return`hsl(${this.slowAverage+e}, 100%, 50%)`;const t=this.tracks[e].analyserNode,n=new Uint8Array(t.frequencyBinCount);t.getByteFrequencyData(n);const o=Math.max(...n),a=n.indexOf(o);return this.updateSlowAverage(a),`hsl(${this.slowAverage+e+10*a%240}, 100%, 50%)`}updateSlowAverage(e){this.slowAverage=this.slowAverage+.001*e%240}unMuteTrack(e){if(-1!=e){if(!this.tracks[e])throw new Error(`Track ${e} does not exist.`);this.tracks[e].gainNode.gain.value=.5}}muteTrack(e){if(-1!=e){if(!this.tracks[e])throw new Error(`Track ${e} does not exist.`);this.tracks[e].gainNode.gain.value=0}}muteAll(){for(let e=0;e<this.tracks.length;e++)this.muteTrack(e)}fx1(e,t){if(0!=e&&0!=t&&Math.random()>.1)return;if(!this.fx1a||!this.fx1b)return;console.log("fx1 called with x:",e,"y:",t),console.log("AudioContext state:",this.audioContext.state),console.log("Current time:",this.audioContext.currentTime),console.log("Applying gain:",25*e,"to fx1a");const n=Math.floor(10*e);this.fx1a.gain.setValueAtTime(n,this.audioContext.currentTime),this.fx1b.delayTime.setValueAtTime(t,this.audioContext.currentTime),console.log(this.fx1a,this.fx1b)}},t=16;var n=!1,o=!1,a=null;function s(e){document.querySelectorAll(".ball").forEach((t=>{t.style.display=e?"block":"none"}))}function i(e){if(!e)return-1;const t=e.split("square-");return t.length<2?-1:parseInt(t[1])}function d(e,t){return{x:e/window.innerWidth,y:t/window.innerHeight}}function r(e){if(e){const e=document.createElement("div");e.classList.add("spinner"),e.id="spinner",document.body.appendChild(e)}else{const e=document.getElementById("spinner");e?.remove()}}function c(){if(requestAnimationFrame(c),n)for(let n=0;n<t;n++){const t=document.getElementById(`square-${n}`);t&&(t.style.backgroundColor=e.getFrequencyColor(n))}}document.addEventListener("DOMContentLoaded",(()=>{!function(){const l=document.getElementById("start-button"),u=document.getElementById("info");l?.addEventListener("click",(async()=>{l.remove(),u?.remove(),r(!0),await async function(){n||(await e.initAudio(["stems/4-on-floor.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/toms.wav","stems/guitar.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/extacy.wav"]),n=!0)}(),r(!1),function(){const e=document.createElement("div");e.classList.add("fx"),e.id="fx",document.body.appendChild(e),e.style.display="none";const n=document.createElement("div");n.classList.add("fx1"),n.id="fx1",n.innerText="ðŸŒŠ",e.appendChild(n);const o=document.createElement("div");o.classList.add("fxspacer"),o.id="fxspacer",e.appendChild(o);const s=document.createElement("div");s.classList.add("fx2"),s.id="fx2",s.innerText="ðŸ•¥",e.appendChild(s);const i=document.createElement("div");i.classList.add("matrix"),i.id="matrix",document.body.appendChild(i);for(let e=0;e<t;e++){const t=document.createElement("div");t.classList.add("square"),t.id=`square-${e}`,i.appendChild(t)}(a=document.createElement("div")).classList.add("ballhome"),a.id="ballhome",document.body.appendChild(a);for(let e=0;e<4;e++){const t=document.createElement("div");t.classList.add("ball"),t.id=`ball-${e}`,t.draggable=!0,t.innerText="ðŸŒˆ",a.appendChild(t)}}(),function(){const t=document.querySelectorAll(".ball"),n=document.querySelectorAll(".square");let r=null,c=null;const l=t=>{r&&(console.log("Dropped:",r.id,t.id),e.unMuteTrack(i(t.id)),t.appendChild(r),c=null,r.style.display="block",r=null)};if(t.forEach((t=>{t.addEventListener("dragstart",(n=>{r=t,c=t.parentElement,n.dataTransfer?.setData("text/plain",t.id),console.log("[Dragstart]: Lifted",t.id,"from",c.id),e.muteTrack(i(c.id))})),t.addEventListener("touchstart",(n=>{o=!0,r=t,c=t.parentElement,console.log("[Touchstart] Lifted",t.id,"from",c.id),e.muteTrack(i(c.id))})),t.addEventListener("touchmove",(e=>{if(console.log("[Touchmove] Dragging",t.id,e.touches.length),e.preventDefault(),o=!0,1===e.touches.length){const n=e.touches[0];t.style.left=n.clientX-25+"px",t.style.top=n.clientY-25+"px"}})),t.addEventListener("touchend",(e=>{if(console.log("[Touchend] Dropped",t.id),!r)return;s(!1);const n=e.changedTouches[0],o=document.elementFromPoint(n.clientX,n.clientY);s(!0),l(o)}))})),n.forEach((e=>{e.addEventListener("dragover",(e=>{e.preventDefault()})),e.addEventListener("drop",(t=>{t.preventDefault(),l(e)}))})),!a)throw new Error("Ball home not found");a.addEventListener("dragover",(e=>{e.preventDefault()})),a.addEventListener("drop",(e=>{if(e.preventDefault(),!a)throw new Error("Ball home not found");l(a)})),document.addEventListener("dragover",(e=>{o||e.preventDefault()})),document.addEventListener("drop",(e=>{if(!o){const e=document.getElementById("ballhome");l(e)}}));const u=document.getElementById("fx1");if(!u)throw new Error("fx1 not found");u.draggable=!0,document.getElementById("fx2"),u?.addEventListener("dragstart",(t=>{const{x:n,y:o}=d(t.x,t.y);e.fx1(n,o),console.log("dragstart")})),u?.addEventListener("drag",(t=>{const{x:n,y:o}=d(t.x,t.y);e.fx1(n,o),console.log("dragmove")})),u?.addEventListener("dragend",(t=>{e.fx1(0,0),console.log("dragend")})),u?.addEventListener("touchstart",(t=>{if(1!=t.touches.length)return;const n=t.touches[0],{x:o,y:a}=d(n.clientX,n.clientY);e.fx1(o,a),console.log("touchstart")})),u?.addEventListener("touchmove",(t=>{if(1!=t.touches.length)return;const n=t.touches[0],{x:o,y:a}=d(n.clientX,n.clientY);e.fx1(o,a),console.log("touchmove")})),u?.addEventListener("touchend",(t=>{1==t.touches.length&&(e.fx1(0,0),console.log("touchend"))}))}(),c()}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RzZELElBQUksRUFBRyxHQUNWSSxRQUFRQyxJQUFJLFVBQVUsSUFFeEJMLEdBQUswQyxpQkFBaUIsY0FBZWlCLElBQ25DLEdBQXdCLEdBQXBCQSxFQUFFSSxRQUFRakgsT0FDWixPQUVGLE1BQU1tSCxFQUFRTixFQUFFSSxRQUFRLElBQ2xCLEVBQUM5RCxFQUFDLEVBQUVDLEdBQUt3QixFQUFhdUMsRUFBTUUsUUFBU0YsRUFBTUksU0FDakRsSSxFQUFHNkQsSUFBSUMsRUFBR0MsR0FDVkUsUUFBUUMsSUFBSSxhQUFhLElBRTNCTCxHQUFLMEMsaUJBQWlCLGFBQWNpQixJQUNsQyxHQUF3QixHQUFwQkEsRUFBRUksUUFBUWpILE9BQ1osT0FFRixNQUFNbUgsRUFBUU4sRUFBRUksUUFBUSxJQUNsQixFQUFDOUQsRUFBQyxFQUFFQyxHQUFLd0IsRUFBYXVDLEVBQU1FLFFBQVNGLEVBQU1JLFNBQ2pEbEksRUFBRzZELElBQUlDLEVBQUdDLEdBQ1ZFLFFBQVFDLElBQUksWUFBWSxJQUUxQkwsR0FBSzBDLGlCQUFpQixZQUFhaUIsSUFDVCxHQUFwQkEsRUFBRUksUUFBUWpILFNBR2RYLEVBQUc2RCxJQUFJLEVBQUcsR0FDVkksUUFBUUMsSUFBSSxZQUFXLEdBaUIzQixDQTBFSW9FLEdBQ0FuQyxHQUFNLEdBRVYsQ0FHRW9DLEVBQW1CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcXVhcmVzLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vc3F1YXJlcy8uL3NyYy9hdWRpby50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdWRpb0NvbnRyb2xsZXIgfSBmcm9tIFwiLi9hdWRpb1wiO1xuXG5jb25zdCBhYyA9IG5ldyBBdWRpb0NvbnRyb2xsZXIoKTtcbmNvbnN0IG5TcXVhcmVzID0gMTY7XG5jb25zdCBuQmFsbHMgPSA0O1xudmFyIGlzUGxheWluZyA9IGZhbHNlO1xudmFyIGlzSW5pdGlhdGVkID0gZmFsc2U7XG52YXIgbW9iaWxlVXNhZ2UgPSBmYWxzZTtcbnZhciBiYWxsSG9tZTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbnZhciBmeEVuYWJsZSA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjcmVhdGVVSSgpIHtcbiAgY29uc3QgZnhkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmeGRpdi5jbGFzc0xpc3QuYWRkKFwiZnhcIik7XG4gIGZ4ZGl2LmlkID0gXCJmeFwiO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZ4ZGl2KTtcbiAgZnhkaXYuc3R5bGUuZGlzcGxheSA9IGZ4RW5hYmxlID8gXCJibG9ja1wiIDogXCJub25lXCI7XG4gIGNvbnN0IGZ4MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZ4MS5jbGFzc0xpc3QuYWRkKFwiZngxXCIpO1xuICBmeDEuaWQgPSBcImZ4MVwiO1xuICBmeDEuaW5uZXJUZXh0ID0gXCLwn4yKXCI7XG4gIGZ4ZGl2LmFwcGVuZENoaWxkKGZ4MSk7XG4gIGNvbnN0IGZ4c3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZnhzcGFjZXIuY2xhc3NMaXN0LmFkZChcImZ4c3BhY2VyXCIpO1xuICBmeHNwYWNlci5pZCA9IFwiZnhzcGFjZXJcIjtcbiAgZnhkaXYuYXBwZW5kQ2hpbGQoZnhzcGFjZXIpO1xuICBjb25zdCBmeDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmeDIuY2xhc3NMaXN0LmFkZChcImZ4MlwiKTtcbiAgZngyLmlkID0gXCJmeDJcIjtcbiAgZngyLmlubmVyVGV4dCA9IFwi8J+VpVwiO1xuICBmeGRpdi5hcHBlbmRDaGlsZChmeDIpO1xuXG4gIGNvbnN0IG1hdHJpeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG1hdHJpeC5jbGFzc0xpc3QuYWRkKFwibWF0cml4XCIpO1xuICBtYXRyaXguaWQgPSBcIm1hdHJpeFwiO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1hdHJpeCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgblNxdWFyZXM7IGkrKykge1xuICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVcIik7XG4gICAgc3F1YXJlLmlkID0gYHNxdWFyZS0ke2l9YDtcbiAgICBtYXRyaXguYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgfVxuICBiYWxsSG9tZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGJhbGxIb21lLmNsYXNzTGlzdC5hZGQoXCJiYWxsaG9tZVwiKTtcbiAgYmFsbEhvbWUuaWQgPSBcImJhbGxob21lXCI7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYmFsbEhvbWUpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbkJhbGxzOyBpKyspIHtcbiAgICBjb25zdCBiYWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiYWxsLmNsYXNzTGlzdC5hZGQoXCJiYWxsXCIpO1xuICAgIGJhbGwuaWQgPSBgYmFsbC0ke2l9YDtcbiAgICBiYWxsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgYmFsbC5pbm5lclRleHQgPSBg8J+MiGA7XG4gICAgYmFsbEhvbWUuYXBwZW5kQ2hpbGQoYmFsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFVJKCkge1xuICBjb25zdCBiYWxsczogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJhbGxcIik7XG4gIGNvbnN0IHNxdWFyZXM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zcXVhcmVcIik7XG4gIGxldCBhY3RpdmVCYWxsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBsZXQgb3JpZ2luU3F1YXJlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IGRyb3BCYWxsID0gKHRhcmdldDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICBpZiAoYWN0aXZlQmFsbCkge1xuICAgICAgY29uc29sZS5sb2coXCJEcm9wcGVkOlwiLCBhY3RpdmVCYWxsLmlkLCB0YXJnZXQuaWQpO1xuICAgICAgYWMudW5NdXRlVHJhY2soZ2V0U3F1YXJlSWQodGFyZ2V0LmlkKSk7XG4gICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoYWN0aXZlQmFsbCk7XG4gICAgICBvcmlnaW5TcXVhcmUgPSBudWxsO1xuICAgICAgYWN0aXZlQmFsbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiOyAvLyBNYWtlIHN1cmUgdG8gZGlzcGxheSB0aGUgYmFsbCBhZ2FpblxuICAgICAgYWN0aXZlQmFsbCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIGJhbGxzLmZvckVhY2goKGJhbGwpID0+IHtcbiAgICBiYWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgKGU6IERyYWdFdmVudCkgPT4ge1xuICAgICAgYWN0aXZlQmFsbCA9IGJhbGw7XG4gICAgICBvcmlnaW5TcXVhcmUgPSBiYWxsLnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBlLmRhdGFUcmFuc2Zlcj8uc2V0RGF0YShcInRleHQvcGxhaW5cIiwgYmFsbC5pZCk7XG4gICAgICBjb25zb2xlLmxvZyhcIltEcmFnc3RhcnRdOiBMaWZ0ZWRcIiwgYmFsbC5pZCwgXCJmcm9tXCIsIG9yaWdpblNxdWFyZS5pZCk7XG4gICAgICBhYy5tdXRlVHJhY2soZ2V0U3F1YXJlSWQob3JpZ2luU3F1YXJlLmlkKSk7XG4gICAgfSk7XG5cbiAgICBiYWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBtb2JpbGVVc2FnZSA9IHRydWU7XG4gICAgICBhY3RpdmVCYWxsID0gYmFsbDtcbiAgICAgIG9yaWdpblNxdWFyZSA9IGJhbGwucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGNvbnNvbGUubG9nKFwiW1RvdWNoc3RhcnRdIExpZnRlZFwiLCBiYWxsLmlkLCBcImZyb21cIiwgb3JpZ2luU3F1YXJlLmlkKTtcbiAgICAgIGFjLm11dGVUcmFjayhnZXRTcXVhcmVJZChvcmlnaW5TcXVhcmUuaWQpKTtcbiAgICB9KTtcblxuICAgIGJhbGwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCAoZTogVG91Y2hFdmVudCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJbVG91Y2htb3ZlXSBEcmFnZ2luZ1wiLCBiYWxsLmlkLCBlLnRvdWNoZXMubGVuZ3RoKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vYmlsZVVzYWdlID0gdHJ1ZTtcbiAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gZS50b3VjaGVzWzBdO1xuICAgICAgICBiYWxsLnN0eWxlLmxlZnQgPSBgJHt0b3VjaC5jbGllbnRYIC0gMjV9cHhgOyAvLyBBZGp1c3QgZm9yIGNlbnRlciBvZiB0aGUgYmFsbFxuICAgICAgICBiYWxsLnN0eWxlLnRvcCA9IGAke3RvdWNoLmNsaWVudFkgLSAyNX1weGA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBiYWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCAoZTogVG91Y2hFdmVudCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJbVG91Y2hlbmRdIERyb3BwZWRcIiwgYmFsbC5pZCk7XG4gICAgICBpZiAoIWFjdGl2ZUJhbGwpIHJldHVybjtcbiAgICAgIHNob3dCYWxscyhmYWxzZSk7XG4gICAgICBjb25zdCB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChcbiAgICAgICAgdG91Y2guY2xpZW50WCxcbiAgICAgICAgdG91Y2guY2xpZW50WVxuICAgICAgKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIHNob3dCYWxscyh0cnVlKTtcbiAgICAgIGRyb3BCYWxsKHRhcmdldEVsZW1lbnQpO1xuICAgIH0pO1xuICB9KTtcblxuICBzcXVhcmVzLmZvckVhY2goKHNxdWFyZSkgPT4ge1xuICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGU6IERyYWdFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChlOiBEcmFnRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRyb3BCYWxsKHNxdWFyZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmICghYmFsbEhvbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWxsIGhvbWUgbm90IGZvdW5kXCIpO1xuICB9XG4gIGJhbGxIb21lLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9KTtcblxuICBiYWxsSG9tZS5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghYmFsbEhvbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhbGwgaG9tZSBub3QgZm91bmRcIik7XG4gICAgfVxuICAgIGRyb3BCYWxsKGJhbGxIb21lKTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChlKSA9PiB7XG4gICAgaWYgKCFtb2JpbGVVc2FnZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBUaGlzIGFsbG93cyB0aGUgZHJvcCB0byBiZSBhY2NlcHRlZC5cbiAgICB9XG4gIH0pO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCAoZSkgPT4ge1xuICAgIGlmICghbW9iaWxlVXNhZ2UpIHtcbiAgICAgIGNvbnN0IGJhbGxIb21lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYWxsaG9tZVwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGRyb3BCYWxsKGJhbGxIb21lKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGluaXQgZnhcbiAgY29uc3QgZngxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmeDFcIik7XG4gIGlmICghZngxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZngxIG5vdCBmb3VuZFwiKTtcbiAgfVxuICBmeDEuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgY29uc3QgZngyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmeDJcIik7XG4gIGZ4MT8uYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLCAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgY29uc3Qge3gsIHl9ID0gbm9ybWFsaXplZFhZKGUueCwgZS55KVxuICAgIGFjLmZ4MSh4LCB5KTtcbiAgICBjb25zb2xlLmxvZyhcImRyYWdzdGFydFwiKTtcbiAgfSk7XG4gIGZ4MT8uYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdcIiwgKGU6IERyYWdFdmVudCkgPT4ge1xuICAgIGNvbnN0IHt4LCB5fSA9IG5vcm1hbGl6ZWRYWShlLngsIGUueSlcbiAgICBhYy5meDEoeCwgeSk7XG4gICAgY29uc29sZS5sb2coXCJkcmFnbW92ZVwiKTtcbiAgfSk7XG4gIGZ4MT8uYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIiwgKGU6IERyYWdFdmVudCkgPT4ge1xuICAgIGFjLmZ4MSgwLCAwKTtcbiAgICBjb25zb2xlLmxvZyhcImRyYWdlbmRcIik7XG4gIH0pO1xuICBmeDE/LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggIT0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0b3VjaCA9IGUudG91Y2hlc1swXTtcbiAgICBjb25zdCB7eCwgeX0gPSBub3JtYWxpemVkWFkodG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSlcbiAgICBhYy5meDEoeCwgeSlcbiAgICBjb25zb2xlLmxvZyhcInRvdWNoc3RhcnRcIik7XG4gIH0pO1xuICBmeDE/LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCAhPSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRvdWNoID0gZS50b3VjaGVzWzBdO1xuICAgIGNvbnN0IHt4LCB5fSA9IG5vcm1hbGl6ZWRYWSh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKVxuICAgIGFjLmZ4MSh4LCB5KVxuICAgIGNvbnNvbGUubG9nKFwidG91Y2htb3ZlXCIpO1xuICB9KTtcbiAgZngxPy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCAhPSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFjLmZ4MSgwLCAwKTtcbiAgICBjb25zb2xlLmxvZyhcInRvdWNoZW5kXCIpO1xuICB9KTtcbiAgLy8gZG9lc250IHdvcmssIHdlIHdvdWxkIG5lZWQgbGlzdGVuZXJzIGFjcm9zcyB0aGUgd2hvbGUgc2NyZWVuXG4gIC8vIGZ4MT8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgLy8gICAgIC8vIEhhbmRsZSBjbGljayBldmVudCBmb3IgZngxXG4gIC8vICAgICBjb25zb2xlLmxvZyhcImNsaWNrXCIpO1xuICAvLyB9KTtcblxuICAvLyBmeDE/LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKCkgPT4ge1xuICAvLyAgICAgLy8gSGFuZGxlIG1vdXNlIGRvd24gZXZlbnQgZm9yIGZ4MVxuICAvLyAgICAgY29uc29sZS5sb2coXCJtb3VzZWRvd25cIik7XG4gIC8vIH0pO1xuXG4gIC8vIGZ4MT8uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgKCkgPT4ge1xuICAvLyAgICAgLy8gSGFuZGxlIG1vdXNlIHVwIGV2ZW50IGZvciBmeDFcbiAgLy8gICAgIGNvbnNvbGUubG9nKFwibW91c2V1cFwiKTtcbiAgLy8gfSk7XG59XG5cbmZ1bmN0aW9uIHNob3dCYWxscyhzaG93OiBib29sZWFuKSB7XG4gIGNvbnN0IGJhbGxzOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYmFsbFwiKTtcbiAgYmFsbHMuZm9yRWFjaCgoYmFsbCkgPT4ge1xuICAgIGJhbGwuc3R5bGUuZGlzcGxheSA9IHNob3cgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFNxdWFyZUlkKGlkOiBzdHJpbmcgfCBudWxsKTogbnVtYmVyIHtcbiAgaWYgKCFpZCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBjb25zdCBwYXJ0cyA9IGlkLnNwbGl0KFwic3F1YXJlLVwiKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIHBhcnNlSW50KHBhcnRzWzFdKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplZFhZKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmV0dXJuIHt4OiB4IC8gd2lkdGgsIHk6IHkgLyBoZWlnaHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRBdWRpbygpIHtcbiAgaWYgKGlzSW5pdGlhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IGFjLmluaXRBdWRpbyhbXG4gICAgXCJzdGVtcy80LW9uLWZsb29yLndhdlwiLFxuICAgIFwic3RlbXMvYmFzcy53YXZcIixcbiAgICBcInN0ZW1zL2RuYi0xMjQud2F2XCIsXG4gICAgXCJzdGVtcy9kcnVtcy53YXZcIixcbiAgICBcInN0ZW1zL2hhdHMud2F2XCIsXG4gICAgXCJzdGVtcy9raWNrLWhhdC53YXZcIixcbiAgICBcInN0ZW1zL3Ntb290aC1jaG9yZHMud2F2XCIsXG4gICAgXCJzdGVtcy90b21zLndhdlwiLFxuICAgIFwic3RlbXMvZ3VpdGFyLndhdlwiLFxuICAgIFwic3RlbXMvYmFzcy53YXZcIixcbiAgICBcInN0ZW1zL2RuYi0xMjQud2F2XCIsXG4gICAgXCJzdGVtcy9kcnVtcy53YXZcIixcbiAgICBcInN0ZW1zL2hhdHMud2F2XCIsXG4gICAgXCJzdGVtcy9raWNrLWhhdC53YXZcIixcbiAgICBcInN0ZW1zL3Ntb290aC1jaG9yZHMud2F2XCIsXG4gICAgXCJzdGVtcy9leHRhY3kud2F2XCIsXG4gIF0pO1xuICBpc0luaXRpYXRlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHNwaW5uZXIoc2hvdzogYm9vbGVhbikge1xuICBpZiAoc2hvdykge1xuICAgIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgc3Bpbm5lci5jbGFzc0xpc3QuYWRkKFwic3Bpbm5lclwiKTtcbiAgICBzcGlubmVyLmlkID0gXCJzcGlubmVyXCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGlubmVyKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzcGlubmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlubmVyXCIpO1xuICAgIHNwaW5uZXI/LnJlbW92ZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0YXJ0QnV0dG9uKCkge1xuICBjb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnQtYnV0dG9uXCIpO1xuICBjb25zdCBpbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmZvXCIpO1xuICBzdGFydEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICBzdGFydEJ1dHRvbi5yZW1vdmUoKTtcbiAgICBpbmZvPy5yZW1vdmUoKTtcbiAgICBzcGlubmVyKHRydWUpO1xuICAgIGF3YWl0IGluaXRBdWRpbygpO1xuICAgIHNwaW5uZXIoZmFsc2UpO1xuICAgIGNyZWF0ZVVJKCk7XG4gICAgaW5pdFVJKCk7XG4gICAgZHJhdygpO1xuICB9KTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICBjcmVhdGVTdGFydEJ1dHRvbigpO1xufSk7XG5cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcbiAgaWYgKCFpc0luaXRpYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5TcXVhcmVzOyBpKyspIHtcbiAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc3F1YXJlLSR7aX1gKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAoc3F1YXJlKSB7XG4gICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYWMuZ2V0RnJlcXVlbmN5Q29sb3IoaSk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQXVkaW9Db250cm9sbGVyIHtcbiAgcHJpdmF0ZSBhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dDtcbiAgcHJpdmF0ZSB0cmFja3M6IHtcbiAgICBzb3VyY2VOb2RlOiBBdWRpb0J1ZmZlclNvdXJjZU5vZGU7XG4gICAgZ2Fpbk5vZGU6IEdhaW5Ob2RlO1xuICAgIGFuYWx5c2VyTm9kZTogQW5hbHlzZXJOb2RlO1xuICB9W10gPSBbXTtcbiAgcHJpdmF0ZSBzbG93QXZlcmFnZTogbnVtYmVyID0gMzk7IC8vIG9yYW5nZVxuICBwcml2YXRlIGZ4MWE6IEJpcXVhZEZpbHRlck5vZGUgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBmeDFiOiBEZWxheU5vZGUgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgfVxuXG4gIGFzeW5jIGluaXRBdWRpbyhmaWxlTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKGZpbGVOYW1lcy5sZW5ndGggIT09IDE2KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAxNiBhdWRpbyBmaWxlcy5cIik7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZVByb21pc2VzID0gZmlsZU5hbWVzLm1hcCgoZmlsZU5hbWUpID0+XG4gICAgICB0aGlzLmxvYWRBdWRpb0ZpbGUoZmlsZU5hbWUpXG4gICAgKTtcblxuICAgIGNvbnN0IGF1ZGlvQnVmZmVycyA9IGF3YWl0IFByb21pc2UuYWxsKGZpbGVQcm9taXNlcyk7XG5cbiAgICBhdWRpb0J1ZmZlcnMuZm9yRWFjaCgoYnVmZmVyKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgICBjb25zdCBnYWluTm9kZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcblxuICAgICAgc291cmNlTm9kZS5idWZmZXIgPSBidWZmZXI7XG4gICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gMDsgLy8gU3RhcnQgbXV0ZWRcbiAgICAgIHNvdXJjZU5vZGUuY29ubmVjdChnYWluTm9kZSk7XG5cbiAgICAgIC8vIHNldCB1cCBhbiBhbmFseXNlciBzbyB3ZSBjYW4gZG8gY29vbCB2aXN1YWxzXG4gICAgICBjb25zdCBhbmFseXNlck5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVBbmFseXNlcigpO1xuICAgICAgYW5hbHlzZXJOb2RlLmZmdFNpemUgPSAyMDQ4O1xuICAgICAgZ2Fpbk5vZGUuY29ubmVjdChhbmFseXNlck5vZGUpO1xuXG4gICAgICAvLyBzZXQgdXAgZnggbm9kZXNcbiAgICAgIHRoaXMuZngxYSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuICAgICAgdGhpcy5meDFhLnR5cGUgPSBcImhpZ2hwYXNzXCI7XG4gICAgICB0aGlzLmZ4MWEuZnJlcXVlbmN5LnZhbHVlID0gMTAwMDtcbiAgICAgIHRoaXMuZngxYS5nYWluLnZhbHVlID0gMDtcbiAgICAgIGdhaW5Ob2RlLmNvbm5lY3QodGhpcy5meDFhKTtcblxuICAgICAgdGhpcy5meDFiID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlRGVsYXkoKTtcbiAgICAgIHRoaXMuZngxYi5kZWxheVRpbWUudmFsdWUgPSAwOyAvLyBwYXNzIHRocm91Z2hcbiAgICAgIHRoaXMuZngxYS5jb25uZWN0KHRoaXMuZngxYik7XG5cbiAgICAgIHRoaXMuZngxYi5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcblxuICAgICAgdGhpcy50cmFja3MucHVzaCh7IHNvdXJjZU5vZGUsIGdhaW5Ob2RlLCBhbmFseXNlck5vZGUgfSk7XG5cbiAgICAgIHNvdXJjZU5vZGUubG9vcCA9IHRydWU7XG4gICAgICBzb3VyY2VOb2RlLnN0YXJ0KDApOyAvLyBQbGF5IGltbWVkaWF0ZWx5IGluIHN5bmNcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZEF1ZGlvRmlsZSh1cmw6IHN0cmluZyk6IFByb21pc2U8QXVkaW9CdWZmZXI+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgIHJldHVybiB0aGlzLmF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlCdWZmZXIpO1xuICB9XG5cbiAgZ2V0RnJlcXVlbmN5Q29sb3IodHJhY2s6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgZ2Fpbk5vZGUgPSB0aGlzLnRyYWNrc1t0cmFja10uZ2Fpbk5vZGU7XG4gICAgaWYgKGdhaW5Ob2RlLmdhaW4udmFsdWUgPT09IDApIHtcbiAgICAgIHJldHVybiBgaHNsKCR7dGhpcy5zbG93QXZlcmFnZSArIHRyYWNrfSwgMTAwJSwgNTAlKWA7XG4gICAgfVxuICAgIGNvbnN0IGFuYWx5c2VyTm9kZSA9IHRoaXMudHJhY2tzW3RyYWNrXS5hbmFseXNlck5vZGU7XG4gICAgY29uc3QgZGF0YUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYW5hbHlzZXJOb2RlLmZyZXF1ZW5jeUJpbkNvdW50KTtcbiAgICBhbmFseXNlck5vZGUuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoZGF0YUFycmF5KTtcblxuICAgIC8vIGdldCB0aGUgaGlnaGVzdCBmcmVxdWVuY3lcbiAgICBjb25zdCBtYXggPSBNYXRoLm1heCguLi5kYXRhQXJyYXkpO1xuICAgIGNvbnN0IG1heEluZGV4ID0gZGF0YUFycmF5LmluZGV4T2YobWF4KTtcbiAgICB0aGlzLnVwZGF0ZVNsb3dBdmVyYWdlKG1heEluZGV4KTtcblxuICAgIGNvbnN0IGh1ZSA9IHRoaXMuc2xvd0F2ZXJhZ2UgKyB0cmFjayArICgobWF4SW5kZXggKiAxMCkgJSAyNDApO1xuICAgIHJldHVybiBgaHNsKCR7aHVlfSwgMTAwJSwgNTAlKWA7XG4gIH1cblxuICB1cGRhdGVTbG93QXZlcmFnZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zbG93QXZlcmFnZSA9IHRoaXMuc2xvd0F2ZXJhZ2UgKyAoKHZhbHVlICogMC4wMDEpICUgMjQwKTtcbiAgfVxuXG4gIHVuTXV0ZVRyYWNrKHRyYWNrTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodHJhY2tOdW1iZXIgPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudHJhY2tzW3RyYWNrTnVtYmVyXSkge1xuICAgICAgdGhpcy50cmFja3NbdHJhY2tOdW1iZXJdLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAwLjU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhY2sgJHt0cmFja051bWJlcn0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgfVxuICB9XG5cbiAgbXV0ZVRyYWNrKHRyYWNrTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodHJhY2tOdW1iZXIgPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudHJhY2tzW3RyYWNrTnVtYmVyXSkge1xuICAgICAgdGhpcy50cmFja3NbdHJhY2tOdW1iZXJdLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYWNrICR7dHJhY2tOdW1iZXJ9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgIH1cbiAgfVxuXG4gIG11dGVBbGwoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5tdXRlVHJhY2soaSk7XG4gICAgfVxuICB9XG5cbiAgZngxKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgaWYgKHggIT0gMCAmJiB5ICE9IDApIHtcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC4xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLmZ4MWEgfHwgIXRoaXMuZngxYikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcImZ4MSBjYWxsZWQgd2l0aCB4OlwiLCB4LCBcInk6XCIsIHkpO1xuICAgIGNvbnNvbGUubG9nKFwiQXVkaW9Db250ZXh0IHN0YXRlOlwiLCB0aGlzLmF1ZGlvQ29udGV4dC5zdGF0ZSk7XG4gICAgY29uc29sZS5sb2coXCJDdXJyZW50IHRpbWU6XCIsIHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lKTtcblxuICAgIGNvbnNvbGUubG9nKFwiQXBwbHlpbmcgZ2FpbjpcIiwgeCAqIDI1LCBcInRvIGZ4MWFcIik7XG4gICAgY29uc3QgZ2FpbiA9IE1hdGguZmxvb3IoeCAqIDEwKTtcbiAgICB0aGlzLmZ4MWEuZ2Fpbi5zZXRWYWx1ZUF0VGltZShnYWluLCB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSk7XG4gICAgdGhpcy5meDFiLmRlbGF5VGltZS5zZXRWYWx1ZUF0VGltZSh5LCB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSk7XG5cbiAgICBjb25zb2xlLmxvZyh0aGlzLmZ4MWEsIHRoaXMuZngxYik7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJhYyIsImF1ZGlvQ29udGV4dCIsInRyYWNrcyIsInNsb3dBdmVyYWdlIiwiZngxYSIsImZ4MWIiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJBdWRpb0NvbnRleHQiLCJpbml0QXVkaW8iLCJmaWxlTmFtZXMiLCJsZW5ndGgiLCJFcnJvciIsImZpbGVQcm9taXNlcyIsIm1hcCIsImZpbGVOYW1lIiwibG9hZEF1ZGlvRmlsZSIsIlByb21pc2UiLCJhbGwiLCJmb3JFYWNoIiwiYnVmZmVyIiwic291cmNlTm9kZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImdhaW5Ob2RlIiwiY3JlYXRlR2FpbiIsImdhaW4iLCJ2YWx1ZSIsImNvbm5lY3QiLCJhbmFseXNlck5vZGUiLCJjcmVhdGVBbmFseXNlciIsImZmdFNpemUiLCJjcmVhdGVCaXF1YWRGaWx0ZXIiLCJ0eXBlIiwiZnJlcXVlbmN5IiwiY3JlYXRlRGVsYXkiLCJkZWxheVRpbWUiLCJkZXN0aW5hdGlvbiIsInB1c2giLCJsb29wIiwic3RhcnQiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwiYXJyYXlCdWZmZXIiLCJkZWNvZGVBdWRpb0RhdGEiLCJnZXRGcmVxdWVuY3lDb2xvciIsInRyYWNrIiwiZGF0YUFycmF5IiwiVWludDhBcnJheSIsImZyZXF1ZW5jeUJpbkNvdW50IiwiZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEiLCJtYXgiLCJNYXRoIiwibWF4SW5kZXgiLCJpbmRleE9mIiwidXBkYXRlU2xvd0F2ZXJhZ2UiLCJ1bk11dGVUcmFjayIsInRyYWNrTnVtYmVyIiwibXV0ZVRyYWNrIiwibXV0ZUFsbCIsImkiLCJmeDEiLCJ4IiwieSIsInJhbmRvbSIsImNvbnNvbGUiLCJsb2ciLCJzdGF0ZSIsImN1cnJlbnRUaW1lIiwiZmxvb3IiLCJzZXRWYWx1ZUF0VGltZSIsIm5TcXVhcmVzIiwiaXNJbml0aWF0ZWQiLCJtb2JpbGVVc2FnZSIsImJhbGxIb21lIiwic2hvd0JhbGxzIiwic2hvdyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImJhbGwiLCJzdHlsZSIsImRpc3BsYXkiLCJnZXRTcXVhcmVJZCIsImlkIiwicGFydHMiLCJzcGxpdCIsInBhcnNlSW50Iiwibm9ybWFsaXplZFhZIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic3Bpbm5lciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZSIsImRyYXciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzcXVhcmUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnRCdXR0b24iLCJpbmZvIiwiYXN5bmMiLCJmeGRpdiIsImlubmVyVGV4dCIsImZ4c3BhY2VyIiwiZngyIiwibWF0cml4IiwiZHJhZ2dhYmxlIiwiY3JlYXRlVUkiLCJiYWxscyIsInNxdWFyZXMiLCJhY3RpdmVCYWxsIiwib3JpZ2luU3F1YXJlIiwiZHJvcEJhbGwiLCJ0YXJnZXQiLCJlIiwicGFyZW50RWxlbWVudCIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJ0b3VjaGVzIiwicHJldmVudERlZmF1bHQiLCJ0b3VjaCIsImxlZnQiLCJjbGllbnRYIiwidG9wIiwiY2xpZW50WSIsImNoYW5nZWRUb3VjaGVzIiwidGFyZ2V0RWxlbWVudCIsImVsZW1lbnRGcm9tUG9pbnQiLCJpbml0VUkiLCJjcmVhdGVTdGFydEJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=