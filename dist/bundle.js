(()=>{"use strict";const e=new class{audioContext;tracks=[];slowAverage=39;fx1a=null;fx1b=null;constructor(){this.audioContext=new AudioContext}async initAudio(e){if(16!==e.length)throw new Error("Expected 16 audio files.");const t=e.map((e=>this.loadAudioFile(e)));(await Promise.all(t)).forEach((e=>{const t=this.audioContext.createBufferSource(),o=this.audioContext.createGain();t.buffer=e,o.gain.value=0,t.connect(o);const n=this.audioContext.createAnalyser();n.fftSize=2048,o.connect(n),this.fx1a=this.audioContext.createBiquadFilter(),this.fx1a.type="highpass",this.fx1a.frequency.value=1e3,this.fx1a.gain.value=0,o.connect(this.fx1a),this.fx1b=this.audioContext.createDelay(),this.fx1b.delayTime.value=0,this.fx1a.connect(this.fx1b),o.connect(this.audioContext.destination),this.tracks.push({sourceNode:t,gainNode:o,analyserNode:n}),t.loop=!0,t.start(0)}))}async loadAudioFile(e){const t=await fetch(e),o=await t.arrayBuffer();return this.audioContext.decodeAudioData(o)}getFrequencyColor(e){if(0===this.tracks[e].gainNode.gain.value)return`hsl(${this.slowAverage+e}, 100%, 50%)`;const t=this.tracks[e].analyserNode,o=new Uint8Array(t.frequencyBinCount);t.getByteFrequencyData(o);const n=Math.max(...o),s=o.indexOf(n);return this.updateSlowAverage(s),`hsl(${this.slowAverage+e+10*s%240}, 100%, 50%)`}updateSlowAverage(e){this.slowAverage=this.slowAverage+.001*e%240}enableTrack(e,t){if(-1!=e){if(e>=this.tracks.length)throw new Error(`Track ${e} does not exist.`);console.log("Enabling track",e,t),this.tracks[e].gainNode.gain.value=t?.5:0}}muteAll(){for(let e=0;e<this.tracks.length;e++)this.enableTrack(e,!1)}fx1(e,t){if(0!=e&&0!=t&&Math.random()>.1)return;if(!this.fx1a||!this.fx1b)return;console.log("fx1 called with x:",e,"y:",t),console.log("AudioContext state:",this.audioContext.state),console.log("Current time:",this.audioContext.currentTime),console.log("Applying gain:",25*e,"to fx1a");const o=Math.floor(10*e);this.fx1a.gain.setValueAtTime(o,this.audioContext.currentTime),this.fx1b.delayTime.setValueAtTime(t,this.audioContext.currentTime),console.log(this.fx1a,this.fx1b)}},t=16;var o=!1;function n(e,t,o,n){const s=document.createElement(e);return s.classList.add(t),s.id=o,n.appendChild(s),s}function s(e){document.querySelectorAll(".ball").forEach((t=>{t.style.display=e?"block":"none"}))}function i(e){if(!e)return-1;const t=e.split("square-");return t.length<2?-1:parseInt(t[1])}function a(e){if(e)n("div","spinner","spinner",document.body);else{const e=document.getElementById("spinner");e?.remove()}}function r(){if(requestAnimationFrame(r),o)for(let o=0;o<t;o++){const t=document.getElementById(`square-${o}`);t&&(t.style.backgroundColor=e.getFrequencyColor(o))}}document.addEventListener("DOMContentLoaded",(()=>{!function(){const c=document.getElementById("start-button"),l=document.getElementById("info");c?.addEventListener("click",(async()=>{c.remove(),l?.remove(),a(!0),await async function(){o||(await e.initAudio(["stems/4-on-floor.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/toms.wav","stems/guitar.wav","stems/bass.wav","stems/dnb-124.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/smooth-chords.wav","stems/extacy.wav"]),o=!0)}(),a(!1),function(){const e=n("div","matrix","matrix",document.body);for(let o=0;o<t;o++)n("div","square",`square-${o}`,e);const o=n("div","ballhome","ballhome",document.body);for(let e=0;e<4;e++){const t=n("div","ball",`ball-${e}`,o);t.draggable=!0,t.innerText="ðŸŒˆ"}}(),function(){const t=document.querySelectorAll(".ball"),o=(t,o)=>{console.log("Dropped:",t.id,o.id),e.enableTrack(i(o.id),!0),o.appendChild(t)};t.forEach((t=>{t.addEventListener("mousedown",(e=>{const o=t.parentElement;t.setAttribute("origin-square",o.id),t.setAttribute("clicked","true"),console.log("[Mousedown] Picked up",t.id,"from",o.id),e.preventDefault()})),t.addEventListener("mousemove",(e=>{"true"===t.getAttribute("clicked")&&(console.log("[Mousemove] Moving",t.id),e.preventDefault(),t.style.left=e.clientX-25+"px",t.style.top=e.clientY-25+"px")})),t.addEventListener("mouseup",(n=>{if("true"!==t.getAttribute("clicked"))return;const a=t.getAttribute("origin-square");e.enableTrack(i(a),!1),t.setAttribute("clicked","false"),s(!1);const r=document.elementFromPoint(n.clientX,n.clientY);s(!0),o(t,r),console.log("[Mouseup] Dropped",t.id,"from",a)})),t.addEventListener("touchstart",(e=>{const o=t.parentElement;t.setAttribute("origin-square",o.id),console.log("[Touchstart] Lifted",t.id,"from",o.id)})),t.addEventListener("touchmove",(e=>{if(console.log("[Touchmove] Dragging",t.id,e.touches.length),e.preventDefault(),1===e.touches.length){const o=e.touches[0];t.style.left=o.clientX-25+"px",t.style.top=o.clientY-25+"px"}})),t.addEventListener("touchend",(n=>{const a=t.getAttribute("origin-square");e.enableTrack(i(a),!1),s(!1);const r=n.changedTouches[0],c=document.elementFromPoint(r.clientX,r.clientY);s(!0),o(t,c),console.log("[Touchend] Dropped",t.id)}))}))}(),r()}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,