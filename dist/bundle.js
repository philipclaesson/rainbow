(()=>{"use strict";const t=new class{audioContext;tracks=[];constructor(){this.audioContext=new AudioContext}async initAudio(t){if(console.log("Loading audio files..."),16!==t.length)throw new Error("Expected 16 audio files.");const e=t.map((t=>this.loadAudioFile(t)));(await Promise.all(e)).forEach((t=>{const e=this.audioContext.createBufferSource(),a=this.audioContext.createGain();e.buffer=t,a.gain.value=0,e.connect(a),a.connect(this.audioContext.destination),this.tracks.push({sourceNode:e,gainNode:a}),e.loop=!0,e.start(0)}))}async loadAudioFile(t){const e=await fetch(t),a=await e.arrayBuffer();return this.audioContext.decodeAudioData(a)}unMuteTrack(t){if(console.log("unMuteTrack",t),-1!=t){if(!this.tracks[t])throw new Error(`Track ${t} does not exist.`);this.tracks[t].gainNode.gain.value=1}}muteTrack(t){if(console.log("muteTrack",t),-1!=t){if(!this.tracks[t])throw new Error(`Track ${t} does not exist.`);this.tracks[t].gainNode.gain.value=0}}muteAll(){for(let t=0;t<this.tracks.length;t++)this.muteTrack(t)}};var e=!1;function a(t){const e=t.split("-");return e.length<2?-1:parseInt(e[1])}document.addEventListener("DOMContentLoaded",(()=>{!function(){const s=document.getElementById("start-button");s?.addEventListener("click",(()=>{s.remove(),function(){const t=document.createElement("div");t.classList.add("matrix"),t.id="matrix",document.body.appendChild(t);for(let e=0;e<16;e++){const e=document.createElement("div");e.classList.add("square"),t.appendChild(e)}for(let t=0;t<3;t++){const e=document.createElement("div");e.classList.add("ball"),e.id=`ball-${t}`,document.body.appendChild(e)}}(),function(){const e=document.querySelectorAll(".ball"),s=document.querySelectorAll(".square");let n=null,o=null;const i=e=>{n&&e.classList.contains("square")&&(console.log("Dropped:",n.id,e.id),t.unMuteTrack(a(e.id)),e.appendChild(n),o=null,n.style.display="block",n=null)};e.forEach((e=>{e.addEventListener("dragstart",(s=>{n=e,o=e.parentElement,s.dataTransfer?.setData("text/plain",e.id),console.log("Lifted:",e.id,"from",o.id),t.muteTrack(a(o.id))})),e.addEventListener("touchstart",(s=>{n=e,o=e.parentElement,console.log("Lifted:",e.id,"from",o.id),s.preventDefault(),t.muteTrack(a(o.id))})),e.addEventListener("touchmove",(t=>{if(t.preventDefault(),1===t.touches.length){const a=t.touches[0];e.style.left=a.clientX-25+"px",e.style.top=a.clientY-25+"px"}})),e.addEventListener("touchend",(t=>{if(!n)return;n.style.display="none";const e=t.changedTouches[0],a=document.elementFromPoint(e.clientX,e.clientY);n.style.display="block",i(a)}))})),s.forEach((t=>{t.id||(t.id=`square-${Array.from(s).indexOf(t)}`),t.addEventListener("dragover",(t=>{t.preventDefault()})),t.addEventListener("drop",(e=>{e.preventDefault();const a=e.dataTransfer?.getData("text");a&&(document.getElementById(a),i(t))}))}))}(),async function(){e||(e=!0,await t.initAudio(["stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav","stems/acid-and-chord.wav","stems/bass.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav","stems/acid-and-chord.wav","stems/bass.wav","stems/drums.wav","stems/hats.wav","stems/kick-hat.wav","stems/toms.wav"]))}()}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFFQSxNQUFNQSxFQUFLLElDRkosTUFDR0MsYUFDQUMsT0FDTixHQUVGLFdBQUFDLEdBQ0VDLEtBQUtILGFBQWUsSUFBSUksWUFDMUIsQ0FFQSxlQUFNQyxDQUFVQyxHQUVkLEdBREFDLFFBQVFDLElBQUksMEJBQ2EsS0FBckJGLEVBQVVHLE9BQ1osTUFBTSxJQUFJQyxNQUFNLDRCQUdsQixNQUFNQyxFQUFlTCxFQUFVTSxLQUFLQyxHQUNsQ1YsS0FBS1csY0FBY0QsWUFHTUUsUUFBUUMsSUFBSUwsSUFFMUJNLFNBQVNDLElBQ3BCLE1BQU1DLEVBQWFoQixLQUFLSCxhQUFhb0IscUJBQy9CQyxFQUFXbEIsS0FBS0gsYUFBYXNCLGFBRW5DSCxFQUFXRCxPQUFTQSxFQUNwQkcsRUFBU0UsS0FBS0MsTUFBUSxFQUV0QkwsRUFBV00sUUFBUUosR0FDbkJBLEVBQVNJLFFBQVF0QixLQUFLSCxhQUFhMEIsYUFFbkN2QixLQUFLRixPQUFPMEIsS0FBSyxDQUFFUixhQUFZRSxhQUUvQkYsRUFBV1MsTUFBTyxFQUNsQlQsRUFBV1UsTUFBTSxFQUFFLEdBRXZCLENBRVEsbUJBQU1mLENBQWNnQixHQUMxQixNQUFNQyxRQUFpQkMsTUFBTUYsR0FDdkJHLFFBQW9CRixFQUFTRSxjQUNuQyxPQUFPOUIsS0FBS0gsYUFBYWtDLGdCQUFnQkQsRUFDM0MsQ0FFQSxXQUFBRSxDQUFZQyxHQUVWLEdBREE3QixRQUFRQyxJQUFJLGNBQWU0QixJQUNQLEdBQWhCQSxFQUFKLENBR0EsSUFBSWpDLEtBQUtGLE9BQU9tQyxHQUdkLE1BQU0sSUFBSTFCLE1BQU0sU0FBUzBCLHFCQUZ6QmpDLEtBQUtGLE9BQU9tQyxHQUFhZixTQUFTRSxLQUFLQyxNQUFRLEMsQ0FJbkQsQ0FFQSxTQUFBYSxDQUFVRCxHQUVSLEdBREE3QixRQUFRQyxJQUFJLFlBQWE0QixJQUNMLEdBQWhCQSxFQUFKLENBR0EsSUFBSWpDLEtBQUtGLE9BQU9tQyxHQUdkLE1BQU0sSUFBSTFCLE1BQU0sU0FBUzBCLHFCQUZ6QmpDLEtBQUtGLE9BQU9tQyxHQUFhZixTQUFTRSxLQUFLQyxNQUFRLEMsQ0FJbkQsQ0FFQSxPQUFBYyxHQUNFLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJcEMsS0FBS0YsT0FBT1EsT0FBUThCLElBQ3RDcEMsS0FBS2tDLFVBQVVFLEVBRW5CLEdEbkVGLElBQ0lDLEdBQWMsRUFpR2xCLFNBQVNDLEVBQVFDLEdBQ2YsTUFBTUMsRUFBUUQsRUFBR0UsTUFBTSxLQUN2QixPQUFJRCxFQUFNbEMsT0FBUyxHQUNULEVBRUhvQyxTQUFTRixFQUFNLEdBQ3hCLENBc0NBRyxTQUFTQyxpQkFBaUIsb0JBQW9CLE1BVjlDLFdBQ0UsTUFBTUMsRUFBY0YsU0FBU0csZUFBZSxnQkFDNUNELEdBQWFELGlCQUFpQixTQUFTLEtBQ3JDQyxFQUFZRSxTQXBJaEIsV0FDRSxNQUFNQyxFQUFTTCxTQUFTTSxjQUFjLE9BQ3RDRCxFQUFPRSxVQUFVQyxJQUFJLFVBQ3JCSCxFQUFPVCxHQUFLLFNBQ1pJLFNBQVNTLEtBQUtDLFlBQVlMLEdBQzFCLElBQUssSUFBSVosRUFBSSxFQUFHQSxFQVZELEdBVWVBLElBQUssQ0FDakMsTUFBTWtCLEVBQVNYLFNBQVNNLGNBQWMsT0FDdENLLEVBQU9KLFVBQVVDLElBQUksVUFFckJILEVBQU9LLFlBQVlDLEUsQ0FFckIsSUFBSyxJQUFJbEIsRUFBSSxFQUFHQSxFQWZILEVBZWVBLElBQUssQ0FDL0IsTUFBTW1CLEVBQU9aLFNBQVNNLGNBQWMsT0FDcENNLEVBQUtMLFVBQVVDLElBQUksUUFDbkJJLEVBQUtoQixHQUFLLFFBQVFILElBQ2xCTyxTQUFTUyxLQUFLQyxZQUFZRSxFLENBRTlCLENBb0hJQyxHQWxISixXQUNFLE1BQU1DLEVBQWlDZCxTQUFTZSxpQkFBaUIsU0FDM0RDLEVBQW1DaEIsU0FBU2UsaUJBQWlCLFdBQ25FLElBQUlFLEVBQWlDLEtBQ2pDQyxFQUFtQyxLQUV2QyxNQUFNQyxFQUFZQyxJQUNaSCxHQUFjRyxFQUFPYixVQUFVYyxTQUFTLFlBQzFDNUQsUUFBUUMsSUFBSSxXQUFZdUQsRUFBV3JCLEdBQUl3QixFQUFPeEIsSUFDOUMzQyxFQUFHb0MsWUFBWU0sRUFBUXlCLEVBQU94QixLQUM5QndCLEVBQU9WLFlBQVlPLEdBQ25CQyxFQUFlLEtBQ2ZELEVBQVdLLE1BQU1DLFFBQVUsUUFDM0JOLEVBQWEsSyxFQUlqQkgsRUFBTTNDLFNBQVN5QyxJQUNiQSxFQUFLWCxpQkFBaUIsYUFBY3VCLElBQ2xDUCxFQUFhTCxFQUNiTSxFQUFlTixFQUFLYSxjQUNwQkQsRUFBRUUsY0FBY0MsUUFBUSxhQUFjZixFQUFLaEIsSUFDM0NuQyxRQUFRQyxJQUFJLFVBQVdrRCxFQUFLaEIsR0FBSSxPQUFRc0IsRUFBYXRCLElBQ3JEM0MsRUFBR3NDLFVBQVVJLEVBQVF1QixFQUFhdEIsSUFBSSxJQUd4Q2dCLEVBQUtYLGlCQUFpQixjQUFldUIsSUFDbkNQLEVBQWFMLEVBQ2JNLEVBQWVOLEVBQUthLGNBQ3BCaEUsUUFBUUMsSUFBSSxVQUFXa0QsRUFBS2hCLEdBQUksT0FBUXNCLEVBQWF0QixJQUNyRDRCLEVBQUVJLGlCQUNGM0UsRUFBR3NDLFVBQVVJLEVBQVF1QixFQUFhdEIsSUFBSSxJQUd4Q2dCLEVBQUtYLGlCQUFpQixhQUFjdUIsSUFFbEMsR0FEQUEsRUFBRUksaUJBQ3VCLElBQXJCSixFQUFFSyxRQUFRbEUsT0FBYyxDQUMxQixNQUFNbUUsRUFBUU4sRUFBRUssUUFBUSxHQUN4QmpCLEVBQUtVLE1BQU1TLEtBQVVELEVBQU1FLFFBQVUsR0FBbkIsS0FDbEJwQixFQUFLVSxNQUFNVyxJQUFTSCxFQUFNSSxRQUFVLEdBQW5CLEksS0FJckJ0QixFQUFLWCxpQkFBaUIsWUFBYXVCLElBQ2pDLElBQUtQLEVBQVksT0FDakJBLEVBQVdLLE1BQU1DLFFBQVUsT0FDM0IsTUFBTU8sRUFBUU4sRUFBRVcsZUFBZSxHQUN6QkMsRUFBZ0JwQyxTQUFTcUMsaUJBQzdCUCxFQUFNRSxRQUNORixFQUFNSSxTQUVSakIsRUFBV0ssTUFBTUMsUUFBVSxRQUMzQkosRUFBU2lCLEVBQWMsR0FFdkIsSUFHSnBCLEVBQVE3QyxTQUFTd0MsSUFDVkEsRUFBT2YsS0FDVmUsRUFBT2YsR0FBSyxVQUFVMEMsTUFBTUMsS0FBS3ZCLEdBQVN3QixRQUFRN0IsTUFFcERBLEVBQU9WLGlCQUFpQixZQUFhdUIsSUFDbkNBLEVBQUVJLGdCQUFnQixJQUdwQmpCLEVBQU9WLGlCQUFpQixRQUFTdUIsSUFDL0JBLEVBQUVJLGlCQUNGLE1BQU1hLEVBQU9qQixFQUFFRSxjQUFjZ0IsUUFBUSxRQUNqQ0QsSUFDV3pDLFNBQVNHLGVBQWVzQyxHQUNyQ3RCLEVBQVNSLEcsR0FFWCxHQUVOLENBeUNJZ0MsR0EvQkpDLGlCQUNNbEQsSUFHSkEsR0FBYyxRQUNSekMsRUFBR00sVUFBVSxDQUNqQixrQkFDQSxpQkFDQSxxQkFDQSxpQkFDQSwyQkFDQSxpQkFDQSxrQkFDQSxpQkFDQSxxQkFDQSxpQkFDQSwyQkFDQSxpQkFDQSxrQkFDQSxpQkFDQSxxQkFDQSxtQkFHSixDQVFJQSxFQUFXLEdBRWYsQ0FHRXNGLEVBQW1CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcXVhcmVzLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vc3F1YXJlcy8uL3NyYy9hdWRpby50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdWRpb0NvbnRyb2xsZXIgfSBmcm9tIFwiLi9hdWRpb1wiO1xuXG5jb25zdCBhYyA9IG5ldyBBdWRpb0NvbnRyb2xsZXIoKTtcbmNvbnN0IG5TcXVhcmVzID0gMTY7XG5jb25zdCBuQmFsbHMgPSAzO1xudmFyIGlzUGxheWluZyA9IGZhbHNlO1xudmFyIGlzSW5pdGlhdGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGNyZWF0ZVVJKCkge1xuICBjb25zdCBtYXRyaXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBtYXRyaXguY2xhc3NMaXN0LmFkZChcIm1hdHJpeFwiKTtcbiAgbWF0cml4LmlkID0gXCJtYXRyaXhcIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYXRyaXgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5TcXVhcmVzOyBpKyspIHtcbiAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic3F1YXJlXCIpO1xuICAgIC8vIHNxdWFyZS5pZCA9IGBzcXVhcmUtJHtpfWA7XG4gICAgbWF0cml4LmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuQmFsbHM7IGkrKykge1xuICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJhbGwuY2xhc3NMaXN0LmFkZChcImJhbGxcIik7XG4gICAgYmFsbC5pZCA9IGBiYWxsLSR7aX1gO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYmFsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFVJKCkge1xuICBjb25zdCBiYWxsczogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJhbGxcIik7XG4gIGNvbnN0IHNxdWFyZXM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zcXVhcmVcIik7XG4gIGxldCBhY3RpdmVCYWxsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBsZXQgb3JpZ2luU3F1YXJlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IGRyb3BCYWxsID0gKHRhcmdldDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICBpZiAoYWN0aXZlQmFsbCAmJiB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic3F1YXJlXCIpKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkRyb3BwZWQ6XCIsIGFjdGl2ZUJhbGwuaWQsIHRhcmdldC5pZCk7XG4gICAgICBhYy51bk11dGVUcmFjayhpZFRvSW50KHRhcmdldC5pZCkpO1xuICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKGFjdGl2ZUJhbGwpO1xuICAgICAgb3JpZ2luU3F1YXJlID0gbnVsbDtcbiAgICAgIGFjdGl2ZUJhbGwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy8gTWFrZSBzdXJlIHRvIGRpc3BsYXkgdGhlIGJhbGwgYWdhaW5cbiAgICAgIGFjdGl2ZUJhbGwgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBiYWxscy5mb3JFYWNoKChiYWxsKSA9PiB7XG4gICAgYmFsbC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIChlOiBEcmFnRXZlbnQpID0+IHtcbiAgICAgIGFjdGl2ZUJhbGwgPSBiYWxsO1xuICAgICAgb3JpZ2luU3F1YXJlID0gYmFsbC5wYXJlbnRFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgICAgZS5kYXRhVHJhbnNmZXI/LnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIGJhbGwuaWQpO1xuICAgICAgY29uc29sZS5sb2coXCJMaWZ0ZWQ6XCIsIGJhbGwuaWQsIFwiZnJvbVwiLCBvcmlnaW5TcXVhcmUuaWQpO1xuICAgICAgYWMubXV0ZVRyYWNrKGlkVG9JbnQob3JpZ2luU3F1YXJlLmlkKSk7XG4gICAgfSk7XG5cbiAgICBiYWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBhY3RpdmVCYWxsID0gYmFsbDtcbiAgICAgIG9yaWdpblNxdWFyZSA9IGJhbGwucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGNvbnNvbGUubG9nKFwiTGlmdGVkOlwiLCBiYWxsLmlkLCBcImZyb21cIiwgb3JpZ2luU3F1YXJlLmlkKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGFjLm11dGVUcmFjayhpZFRvSW50KG9yaWdpblNxdWFyZS5pZCkpO1xuICAgIH0pO1xuXG4gICAgYmFsbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCB0b3VjaCA9IGUudG91Y2hlc1swXTtcbiAgICAgICAgYmFsbC5zdHlsZS5sZWZ0ID0gYCR7dG91Y2guY2xpZW50WCAtIDI1fXB4YDsgLy8gQWRqdXN0IGZvciBjZW50ZXIgb2YgdGhlIGJhbGxcbiAgICAgICAgYmFsbC5zdHlsZS50b3AgPSBgJHt0b3VjaC5jbGllbnRZIC0gMjV9cHhgO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYmFsbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGlmICghYWN0aXZlQmFsbCkgcmV0dXJuO1xuICAgICAgYWN0aXZlQmFsbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7IC8vIFRlbXBvcmFyaWx5IGhpZGUgdGhlIGJhbGwgdG8gZ2V0IGVsZW1lbnQgdW5kZXJuZWF0aFxuICAgICAgY29uc3QgdG91Y2ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoXG4gICAgICAgIHRvdWNoLmNsaWVudFgsXG4gICAgICAgIHRvdWNoLmNsaWVudFlcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBhY3RpdmVCYWxsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7IC8vIFJlLWRpc3BsYXkgdGhlIGJhbGxcbiAgICAgIGRyb3BCYWxsKHRhcmdldEVsZW1lbnQpO1xuICAgICAgLy8gICBjb25zb2xlLmxvZyhcIkRyb3BwZWQ6XCIsIGJhbGwuaWQsIHRhcmdldEVsZW1lbnQuaWQpO1xuICAgIH0pO1xuICB9KTtcblxuICBzcXVhcmVzLmZvckVhY2goKHNxdWFyZSkgPT4ge1xuICAgIGlmICghc3F1YXJlLmlkKSB7XG4gICAgICBzcXVhcmUuaWQgPSBgc3F1YXJlLSR7QXJyYXkuZnJvbShzcXVhcmVzKS5pbmRleE9mKHNxdWFyZSl9YDtcbiAgICB9XG4gICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgKGU6IERyYWdFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZGF0YSA9IGUuZGF0YVRyYW5zZmVyPy5nZXREYXRhKFwidGV4dFwiKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGJhbGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgZHJvcEJhbGwoc3F1YXJlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlkVG9JbnQoaWQ6IHN0cmluZyk6IG51bWJlciB7XG4gIGNvbnN0IHBhcnRzID0gaWQuc3BsaXQoXCItXCIpO1xuICBpZiAocGFydHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gcGFyc2VJbnQocGFydHNbMV0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0QXVkaW8oKSB7XG4gIGlmIChpc0luaXRpYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc0luaXRpYXRlZCA9IHRydWU7XG4gIGF3YWl0IGFjLmluaXRBdWRpbyhbXG4gICAgXCJzdGVtcy9kcnVtcy53YXZcIixcbiAgICBcInN0ZW1zL2hhdHMud2F2XCIsXG4gICAgXCJzdGVtcy9raWNrLWhhdC53YXZcIixcbiAgICBcInN0ZW1zL3RvbXMud2F2XCIsXG4gICAgXCJzdGVtcy9hY2lkLWFuZC1jaG9yZC53YXZcIixcbiAgICBcInN0ZW1zL2Jhc3Mud2F2XCIsXG4gICAgXCJzdGVtcy9kcnVtcy53YXZcIixcbiAgICBcInN0ZW1zL2hhdHMud2F2XCIsXG4gICAgXCJzdGVtcy9raWNrLWhhdC53YXZcIixcbiAgICBcInN0ZW1zL3RvbXMud2F2XCIsXG4gICAgXCJzdGVtcy9hY2lkLWFuZC1jaG9yZC53YXZcIixcbiAgICBcInN0ZW1zL2Jhc3Mud2F2XCIsXG4gICAgXCJzdGVtcy9kcnVtcy53YXZcIixcbiAgICBcInN0ZW1zL2hhdHMud2F2XCIsXG4gICAgXCJzdGVtcy9raWNrLWhhdC53YXZcIixcbiAgICBcInN0ZW1zL3RvbXMud2F2XCIsXG4gIF0pO1xuICAvLyAgIGFjLnVuTXV0ZVRyYWNrKDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdGFydEJ1dHRvbigpIHtcbiAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0LWJ1dHRvblwiKTtcbiAgc3RhcnRCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgc3RhcnRCdXR0b24ucmVtb3ZlKCk7XG4gICAgY3JlYXRlVUkoKTtcbiAgICBpbml0VUkoKTtcbiAgICBpbml0QXVkaW8oKTtcbiAgfSk7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgY3JlYXRlU3RhcnRCdXR0b24oKTtcbn0pO1xuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvQ29udHJvbGxlciB7XG4gIHByaXZhdGUgYXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQ7XG4gIHByaXZhdGUgdHJhY2tzOiB7IHNvdXJjZU5vZGU6IEF1ZGlvQnVmZmVyU291cmNlTm9kZTsgZ2Fpbk5vZGU6IEdhaW5Ob2RlIH1bXSA9XG4gICAgW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gIH1cblxuICBhc3luYyBpbml0QXVkaW8oZmlsZU5hbWVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBhdWRpbyBmaWxlcy4uLlwiKVxuICAgIGlmIChmaWxlTmFtZXMubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgMTYgYXVkaW8gZmlsZXMuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVQcm9taXNlcyA9IGZpbGVOYW1lcy5tYXAoKGZpbGVOYW1lKSA9PlxuICAgICAgdGhpcy5sb2FkQXVkaW9GaWxlKGZpbGVOYW1lKVxuICAgICk7XG5cbiAgICBjb25zdCBhdWRpb0J1ZmZlcnMgPSBhd2FpdCBQcm9taXNlLmFsbChmaWxlUHJvbWlzZXMpO1xuXG4gICAgYXVkaW9CdWZmZXJzLmZvckVhY2goKGJ1ZmZlcikgPT4ge1xuICAgICAgY29uc3Qgc291cmNlTm9kZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgY29uc3QgZ2Fpbk5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG5cbiAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IDA7IC8vIFN0YXJ0IG11dGVkXG5cbiAgICAgIHNvdXJjZU5vZGUuY29ubmVjdChnYWluTm9kZSk7XG4gICAgICBnYWluTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcblxuICAgICAgdGhpcy50cmFja3MucHVzaCh7IHNvdXJjZU5vZGUsIGdhaW5Ob2RlIH0pO1xuICAgIFxuICAgICAgc291cmNlTm9kZS5sb29wID0gdHJ1ZTtcbiAgICAgIHNvdXJjZU5vZGUuc3RhcnQoMCk7IC8vIFBsYXkgaW1tZWRpYXRlbHkgaW4gc3luY1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkQXVkaW9GaWxlKHVybDogc3RyaW5nKTogUHJvbWlzZTxBdWRpb0J1ZmZlcj4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgcmV0dXJuIHRoaXMuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShhcnJheUJ1ZmZlcik7XG4gIH1cblxuICB1bk11dGVUcmFjayh0cmFja051bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coXCJ1bk11dGVUcmFja1wiLCB0cmFja051bWJlcilcbiAgICBpZiAodHJhY2tOdW1iZXIgPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudHJhY2tzW3RyYWNrTnVtYmVyXSkge1xuICAgICAgdGhpcy50cmFja3NbdHJhY2tOdW1iZXJdLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAxOyAvLyBTZXQgZ2FpbiB0byAxIHRvIHVubXV0ZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYWNrICR7dHJhY2tOdW1iZXJ9IGRvZXMgbm90IGV4aXN0LmApO1xuICAgIH1cbiAgfVxuXG4gIG11dGVUcmFjayh0cmFja051bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coXCJtdXRlVHJhY2tcIiwgdHJhY2tOdW1iZXIpO1xuICAgIGlmICh0cmFja051bWJlciA9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnRyYWNrc1t0cmFja051bWJlcl0pIHtcbiAgICAgIHRoaXMudHJhY2tzW3RyYWNrTnVtYmVyXS5nYWluTm9kZS5nYWluLnZhbHVlID0gMDsgLy8gU2V0IGdhaW4gdG8gMCB0byBtdXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhY2sgJHt0cmFja051bWJlcn0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgfVxuICB9XG5cbiAgbXV0ZUFsbCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLm11dGVUcmFjayhpKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJhYyIsImF1ZGlvQ29udGV4dCIsInRyYWNrcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsIkF1ZGlvQ29udGV4dCIsImluaXRBdWRpbyIsImZpbGVOYW1lcyIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJFcnJvciIsImZpbGVQcm9taXNlcyIsIm1hcCIsImZpbGVOYW1lIiwibG9hZEF1ZGlvRmlsZSIsIlByb21pc2UiLCJhbGwiLCJmb3JFYWNoIiwiYnVmZmVyIiwic291cmNlTm9kZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImdhaW5Ob2RlIiwiY3JlYXRlR2FpbiIsImdhaW4iLCJ2YWx1ZSIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInB1c2giLCJsb29wIiwic3RhcnQiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwiYXJyYXlCdWZmZXIiLCJkZWNvZGVBdWRpb0RhdGEiLCJ1bk11dGVUcmFjayIsInRyYWNrTnVtYmVyIiwibXV0ZVRyYWNrIiwibXV0ZUFsbCIsImkiLCJpc0luaXRpYXRlZCIsImlkVG9JbnQiLCJpZCIsInBhcnRzIiwic3BsaXQiLCJwYXJzZUludCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0YXJ0QnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmUiLCJtYXRyaXgiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYm9keSIsImFwcGVuZENoaWxkIiwic3F1YXJlIiwiYmFsbCIsImNyZWF0ZVVJIiwiYmFsbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic3F1YXJlcyIsImFjdGl2ZUJhbGwiLCJvcmlnaW5TcXVhcmUiLCJkcm9wQmFsbCIsInRhcmdldCIsImNvbnRhaW5zIiwic3R5bGUiLCJkaXNwbGF5IiwiZSIsInBhcmVudEVsZW1lbnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwicHJldmVudERlZmF1bHQiLCJ0b3VjaGVzIiwidG91Y2giLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJjaGFuZ2VkVG91Y2hlcyIsInRhcmdldEVsZW1lbnQiLCJlbGVtZW50RnJvbVBvaW50IiwiQXJyYXkiLCJmcm9tIiwiaW5kZXhPZiIsImRhdGEiLCJnZXREYXRhIiwiaW5pdFVJIiwiYXN5bmMiLCJjcmVhdGVTdGFydEJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=